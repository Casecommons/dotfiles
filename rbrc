# Print RVM/rbenv environment
puts "\e[1;4;37mRVM using #{`rvm current`.split("\n").last}\e[0m" if system "type -P rvm &> /dev/null"
puts "\e[1;4;37mrbenv using #{`rbenv version`.split("\n").last}\e[0m" if system "type -P rbenv &> /dev/null"

module Unbundler
  def self.require_external_gem gem
    if defined? Bundler
      unless Bundler.require.map(&:name).include? gem
        gems_dir = $LOAD_PATH.grep(%r{lib/ruby/gems/}).first.gsub(%r{(lib/ruby/gems/[^/]+)/.*$}, '\\1/gems')
        Dir["#{gems_dir}/*"].to_a.each do |gem_path|
          if File.basename(gem_path).gsub(/-(\d\.?)+$/, '') == gem
            $LOAD_PATH << "#{gem_path}/lib"
            require gem
            return
          end
        end
        raise LoadError
      end
    else
      require gem
    end
  end
end

def quickbm(repetitions = 100, &block)
  require 'benchmark'

  Benchmark.bm do |bm|
    bm.report { repetitions.times &block }
  end
end

if RUBY_PLATFORM.include? "darwin"
  # Copy to OS X clipboard
  def copy(str)
    IO.popen('pbcopy', 'w') { |f| f << str.to_s }
    $?.exited?
  end

  # Paste from OS X clipboard
  def paste
    `pbpaste`
  end
end

# Load if in Rails console
if ($0 == 'irb' && ENV['RAILS_ENV']) || ($0 == 'script/rails' && Rails.env) || (defined?(Rails) && Rails.env)
  def change_log(stream)
    if defined? ActiveRecord::Base
      ActiveRecord::Base.logger = Logger.new stream
      ActiveRecord::Base.clear_active_connections!
    end
  end

  def show_log
    change_log STDOUT
  end

  def hide_log
    change_log nil
  end

  change_log STDOUT
end
